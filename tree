import anytree
from anytree import Node
def stringToTree(S,ref):
	S=S.split(' ')
	prev=ref
	
	for name in range(1,len(S)):
		if any(node.name==S[name] for node in prev.children):
			for node in prev.children:
				if node.name==S[name]:
					prev=node
					break
		else:
			prev=Node(S[name],parent=prev)



def getLeaves(ref):
	leaves=[node for node in anytree.PostOrderIter(ref) if node.is_leaf]
	return leaves



def setProbFromSibs(node):
	sum=node.count
	for sib in node.siblings:
		sum+=sib.count
	node.prob=node.count/(sum*1.0)


def setRealProb(node):
	goal=node
	path=[]
	current=node
	while True:
		if hasattr(current.parent,"realProb"):
			setattr(current,"realProb",current.prob*current.parent.realProb)
			print current.parent.name
			if current==goal:
				return
			else:
				
				for n in reversed(path):
					n.realProb=current.realProb*n.prob
					current=n
			return					
		else:
			path.append(current)
			current=current.parent
			
